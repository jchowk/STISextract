      37
ASCIICONVERT   0
BGFIT1D        770
BGFIT1D_GAUSS  2282
DATATYPE       4225
EXTRACT_TRACE  6273
FDECOMP        7627
FINDFILE2      8663
FITS_CLOSE     9550
FITS_INFO      10311
FITS_OPEN      12589
FITS_READ      15834
FXPAR          21825
GAUSSIAN       25777
GETTOK         26978
IEEE_TO_HOST   27602
MAN            29370
NUMLINES       31644
OS_FAMILY      32223
PLOTORDERS     32863
POLY_FIT_WEIGHT33571
PSF_GAUSSIAN   34625
REPCHR         36155
STIS_ASCIICONVE37194
STIS_SETUP     37972
STISDRIVER     38526
STISEXTRACT    41076
STISEXTRACT_SIN43145
STRN           45258
STRNUMBER      47492
SXADDPAR       48787
SXDELPAR       51680
SXPAR          52503
TAG_EXIST      55623
TEXTCLOSE      56865
TEXTOPEN       57446
VALID_NUM      60123
WRITESTIS      61874
;+
 ----------------------------------------------------------------------
   STISASCIICONV
      
   *Program Description: 
   
      This program will convert the IDL save files created by the
       STISEXTRACT procedures into ascii files containing columns of
       wavelength, gross and net fluxes, errors, and the derived
       background (in that order).  The output files have the naming
       convention rootname.###.dat, where rootname is the STScI
       archival rootname of the observation and ### is the order
       number.

   *Calling sequence:
      STISASCIICONV
   
   *External Routines:
      WRITESTIS   

   *HISTORY:
      12/99 -- Howk -- Created and documented.
 ----------------------------------------------------------------------   
;-
;+
 ----------------------------------------------------------------------
  BGFIT1D -- 

  *Program description:   
    This routine is used to determine the appropriate 
    background for 2D-rectified STIS images.  It fits
    a cubic spline to the cross-dispersion background
    for each column.  The result is a 2D background 
    image that can be directly subtracted from the STIS
    science image.
 
    **** BGFIT1D_GAUSS is to be preferred. ****
   

  *Calling sequence:
     BGFIT1D, header, stis_image, bg_out, spec_out, xgood, /HIRES

  *Inputs:
     header     -- Standard STIS image header.
     stis_image -- The 2D science data array extracted
                    from a STIS '_x2d' or '_sx2' file.
        

  *Outputs:
     bg_out     -- The 2D background image.
     spec_out   -- The 2D background-subtracted spectral image.
     yspec      -- The average y-position of the spectral trace in
                     the image.
     (xgood     -- Optional array containing points used for bg fit.)   

  *Optional Keywords:
       /HIRES   -- High-resolution (non-binned) datasets.

  *External Routines Called:  
     POLY_FIT, POL_FIT_WEIGHTED, FXPAR, CONVOL, PSF_GAUSSIAN, POLY

   *HISTORY:
         7/99 -- Howk -- Created and added comments.
        12/99 -- Howk -- Added HIRES compatability
        12/00 -- Howk -- Changed polyfitw to poly_fit_weighted
                          for use with IDL v5.4   
   
 ----------------------------------------------------------------------
;-
;+
 ----------------------------------------------------------------------
  BGFIT1D_GAUSS -- 

  *Program description:   
    This routine is used to determine the appropriate 
    background for 2D-rectified STIS images.  It fits
    a cubic spline to the cross-dispersion background
    for each column.  The result is a 2D background 
    image that can be directly subtracted from the STIS
    science image.  ** This routine differs from BGFIT1D
    in that it uses a Gaussian fit to identify the spectral
    trace; it also uses such fits to identify and mask out
    other spectral orders that appear in the 2D images due
    to non-optimal CALSTIS reference files.   
   
  *Calling sequence:
     BGFIT1D_GAUSS, header, stis_image, bg_out, spec_outyspec, xgood, $
             HIRES=hires_yes


  *Inputs:
     header     -- Standard STIS image header.
     stis_image -- The 2D science data array extracted
                    from a STIS '_x2d' or '_sx2' file.
        

  *Outputs:
     bg_out     -- The 2D background image.
     spec_out   -- The 2D background-subtracted spectral image.
     yspec      -- The average y-position of the spectral trace in
                     the image.
     (xgood     -- Optional array containing points used for bg fit.)   

  *Optional Keywords:
       /HIRES   -- High-resolution (non-binned) datasets.

  *External Routines Called:  
     POLY_FIT, POL_FIT_WEIGHTED, FXPAR, CONVOL, PSF_GAUSSIAN, POLY,
         GAUSSFIT, GAUSSIAN
    
   *HISTORY:
         7/99 -- Howk -- Created and added comments.
        12/99 -- Howk -- Added HIRES compatability
        12/00 -- Howk -- Changed polyfitw to poly_fit_weighted
                          for use with IDL v5.4   
         3/01 -- Howk -- Added gaussian fitting to identify spectral
                          trace and multiple orders in the 2D spectrum.   
   
 ----------------------------------------------------------------------
;-
;+
 NAME:
       DATATYPE
 PURPOSE:
       Datatype of variable as a string (3 char or spelled out).
 CATEGORY:
 CALLING SEQUENCE:
       typ = datatype(var, [flag])
 INPUTS:
       var = variable to examine.         in
       flag = output format flag (def=0). in
 KEYWORD PARAMETERS:
       Keywords:
         /DESCRIPTOR returns a descriptor for the given variable.
           If the variable is a scalar the value is returned as
           a string.  If it is an array a description is return
           just like the HELP command gives.  Ex:
           datatype(fltarr(2,3,5),/desc) gives
             FLTARR(2,3,5)  (flag always defaults to 3 for /DESC).
 OUTPUTS:
       typ = datatype string or number.   out
          flag=0    flag=1      flag=2    flag=3
          UND       Undefined   0         UND
          BYT       Byte        1         BYT
          INT       Integer     2         INT
          LON       Long        3         LON
          FLO       Float       4         FLT
          DOU       Double      5         DBL
          COM       Complex     6         COMPLEX
          STR       String      7         STR
          STC       Structure   8         STC
          DCO       DComplex    9         DCOMPLEX
 COMMON BLOCKS:
 NOTES:
 MODIFICATION HISTORY:
       Written by R. Sterner, 24 Oct, 1985.
       RES 29 June, 1988 --- added spelled out TYPE.
       R. Sterner, 13 Dec 1990 --- Added strings and structures.
       R. Sterner, 19 Jun, 1991 --- Added format 3.
       R. Sterner, 18 Mar, 1993 --- Added /DESCRIPTOR.
       R. Sterner, 1995 Jul 24 --- Added DCOMPLEX for data type 9.
       Johns Hopkins University Applied Physics Laboratory.

 Copyright (C) 1985, Johns Hopkins University/Applied Physics Laboratory
 This software may be used, copied, or redistributed as long as it is not
 sold and this copyright notice is reproduced on each copy made.  This
 routine is provided as is without any express or implied warranties
 whatsoever.  Other limitations apply as described in the file disclaimer.txt.
;-
;+
 ----------------------------------------------------------------------
 EXTRACT_TRACE --

   *Program description:
      This procedure extracts the gross, background, and error
       spectra from a series of 2-D images.  The center of the
       spectra in the cross-dispersion direction is given by 
       the input yspec.  The input diff2pt is the photometric   
       calibration.    
   
   *Calling sequence:
      EXTRACT_TRACE, grating, spec, bg_fit, err_in, yspec, diff2pt, 
                   gross, flux, bg_out, err_out, /optimal

   *Inputs:
      grating -- Grating name.   
      spec,bg_fit,err_in -- 2D arrays holding spectral, background,
                            and error data.   
      yspec   -- Y centroid of the spectral trace.
      diff2pt -- Constant for conversion to STScI flux scale.

   *Outputs: 
      gross,flux,bg_out,err_out -- 1D output arrays containing
                                   gross and net flux, background, 
                                   and error vectors.
   *Keywords:
      \optimal -- Optimal extraction: NOT IMPLEMENTED
      \hires   -- For images at full resolution (not rebinned).


   *HISTORY:
         7/99 -- Howk -- Created and added comments.   
        12/99 -- Howk -- Added HIRES compatability

 ----------------------------------------------------------------------
;-
;+
 NAME:
    FDECOMP
 PURPOSE:
    Routine to decompose file name
 CALLING SEQENCE:
	fdecomp,filename,disk,dir,name,qual,version
 INPUT:
	filename - string file name
 OUTPUTS:
	disk - disk name, always null on a Unix machine
	dir - directory name
	name - file name
	qual - qualifier
	version - version number, always null on a Unix machine
 ROUTINES CALLED:
       GETTOK
 NOTES:
	1) Does not handle unix  ../ syntax.
	2) Does not handle non-standard unix names (i.e. this.is.non.standard)
	3) Does not handle unix network names (i.e. node:/disk1/data)
 RESULTS:
	All tokens are removed between:
		1) name and qual	(i.e. period is removed)
		2) qual and ver		(i.e. semicolon is removed)

 HISTORY
	version 1  D. Lindler  Oct 1986
	converted to SUN IDL.  M. Greason, STX, 30 July 1990.
       Revised by N. Collins, STX, Nov., 1990
          (combined VAX and SUN versions of FDECOMP into one routine)
	22-may-1993	JKF/ACC		- added support for IDL for Windows.
	9-dec-1996	JKF/ACC		- IDL for Windows (4.0 or higher)-Win32
          
;-
;+
 NAME:
       FINDFILE2
 PURPOSE:
       Find files and sort them.
 CATEGORY:
 CALLING SEQUENCE:
       f = findfile2(pat)
 INPUTS:
       pat = filename or wildcard pattern.   in
 KEYWORD PARAMETERS:
       Keywords:
         /SORT means sort file names numerically.
         COUNT=c  Returned number of files found.
 OUTPUTS:
       f = sorted array of found file names. out
 COMMON BLOCKS:
 NOTES:
 MODIFICATION HISTORY:
       R. Sterner, 18 Mar, 1990
       R. Sterner, 1996 Sep 17 --- Added COUNT=c keyword.

 Copyright (C) 1990, Johns Hopkins University/Applied Physics Laboratory
 This software may be used, copied, or redistributed as long as it is not
 sold and this copyright notice is reproduced on each copy made.  This
 routine is provided as is without any express or implied warranties
 whatsoever.  Other limitations apply as described in the file disclaimer.txt.
;-
;+

*NAME:
	FITS_CLOSE

*PURPOSE:
	Close a FITS data file

*CATEGORY:
	INPUT/OUTPUT

*CALLING SEQUENCE:
	FITS_CLOSE,fcb

*INPUTS:
	FCB: fits control block returned by FITS_OPEN.

*KEYWORD PARAMETERS:
       /NO_ABORT: Set to return to calling program instead of a RETALL
               when an I/O error is encountered.  If set, the routine will
               return with !err=-1 and a message in the keyword MESSAGE.
               If not set, FITS_CLOSE will print the message and issue a RETALL
       MESSAGE = value: Output error message
	
*EXAMPLES:
	Open a FITS file, read some data, and close it with FITS_CLOSE

		FITS_OPEN,'infile',fcb
		FITS_READ,fcb,data
		FITS_READ,fcb,moredata
		FITS_CLOSE,fcb

*HISTORY:
	Written by:	D. Lindler	August, 1995
;-
;+
 NAME:
	FITS_INFO
 PURPOSE:
	Provide information about the contents of a FITS file, (primary header
	and data if any + extensions).    Information is printed at the terminal
	and/or stored in a common block

 CALLING SEQUENCE:
	FITS_INFO, Filename, [ /SILENT , TEXTOUT = , N_ext = ]

 INPUT:
	Filename:  Scalar or vector string giving the name of the FITS file(s)
		Can include wildcards such as '*.fits'

 OPTIONAL INPUT KEYWORDS:
	SILENT - This key word will suppress display of the file description
		on the terminal

	TEXTOUT - specifies output device.
		textout=1        TERMINAL using /more option
		textout=2        TERMINAL without /more option
		textout=3        <program>.prt
		textout=4        laser.tmp
		textout=5        user must open file, see TEXTOPEN
		textout=7	append to existing <program.prt> file
		textout = filename (default extension of .prt)

		If TEXTOUT is not supplied, then !TEXTOUT is used
 OPTIONAL OUTPUT KEYWORD:
	N_ext - Returns an integer scalar giving the number of extensions in
		the FITS file

 COMMON BLOCKS
	DESCRIPTOR =  File descriptor string of the form N_hdrrec Naxis IDL_type
		Naxis1 Naxis2 ... Naxisn [N_hdrrec table_type Naxis
		IDL_type Naxis1 ... Naxisn] (repeated for each extension) 
		See the procedure RDFITS_STRUCT for an example of the
		use of this common block

 EXAMPLE:
 	Display info about all FITS files of the form '*.fit' in the current
		directory

		IDL> fits_info, '*.fit'

	Any time a *.fit file is found which is *not* in FITS format, an error 
	message is displayed at the terminal and the program continues

 PROCEDURES USED:
	GETTOK(), STRN(), SXPAR(), TEXTOPEN, TEXTCLOSE 

 SYSTEM VARIABLES:
	The non-standard system variables !TEXTOUT and !TEXTUNIT must be 
	defined before calling FITS_INFO.   

	DEFSYSV,'!TEXTOUT',1
	DEFSYSV,'!TEXTUNIT',0

	One way to define these is to call the procedure ASTROLIB.   
	See TEXTOPEN.PRO for more info
 MODIFICATION HISTORY:
	Written, K. Venkatakrishna, Hughes STX, May 1992
	Added N_ext keyword, and table_name info, G. Reichert
	Work on *very* large FITS files   October 92
       More checks to recognize corrupted FITS files     February, 1993
	Proper check for END keyword    December 1994
	Correctly size variable length binary tables  WBL December 1994
;-
;+

*NAME:
	FITS_OPEN

*PURPOSE:
	Opens a FITS (Flexible Image Transport System) data file.

*CATEGORY:
	INPUT/OUTPUT

*CALLING SEQUENCE:
	FITS_OPEN, filename, fcb

*INPUTS:
	filename : name of the FITS file to open

*OUTPUTS:
	fcb : (FITS Control Block) a IDL structure containing information
		concerning the file.  It is an input to FITS_READ, FITS_WRITE
		and FITS_CLOSE

*KEYWORD PARAMETERS:
	/WRITE: Set this keyword to open a new file for writing. 
	/APPEND: Set to append to an existing file.
	/NO_ABORT: Set to return to calling program instead of a RETALL
		when an I/O error is encountered.  If set, the routine will
		return with !err=-1 and a message in the keyword MESSAGE.
		If not set, FITS_OPEN will print the message and issue a RETALL
	MESSAGE = value: Output error message
	/HPRINT - print headers with routine HPRINT as they are read.
		(useful for debugging a strange file)
	
*NOTES:
	The output FCB should be passed to the other FITS routines (FITS_OPEN,
	FITS_READ, FITS_HELP, and FITS_WRITE).  It has the following structure
	when FITS_OPEN is called without /WRITE or /APPEND keywords set.

	    FCB.FILENAME - name of the input file
		.UNIT - unit number the file is opened to
		.NEXTEND - number of extensions in the file.
		.XTENSION - string array giving the extension type for each
			extension.
		.EXTNAME - string array giving the extension name for each
			extension. (null string if not defined the extension)
		.EXTVER - vector of extension version numbers (0 if not
			defined)
		.EXTLEVEL - vector of extension levels (0 if not defined)
		.GCOUNT - vector with the number of groups in each extension.
		.PCOUNT - vector with parameter count for each group
		.BITPIX - BITPIX for each extension with values
				   8 	byte data
				 16 	short word integers
				 32 	long word integers
				-32   	IEEE floating point
				-64  	IEEE double precision floating point
		.NAXIS - number of axes for each extension.  (0 for null data
			units)
		.AXIS - 2-D array where axis(*,N) gives the size of each axes
			for extension N
		.START_HEADER - vector giving the starting byte in the file
				where each extension header begins
		.START_DATA - vector giving the starting byte in the file
				where the data for each extension begins

		.HMAIN - keyword parameters (less standard required FITS
				keywords) for the primary data unit.
		.OPEN_FOR_WRITE - flag (0= open for read, 1=open for write, 
						 2=open for update)
		.LAST_EXTENSION - last extension number read.
		.RANDOM_GROUPS - 1 if the PDU is random groups format,
				0 otherwise

	When FITS open is called with the /WRITE or /APPEND option, FCB
	contains:

	    FCB.FILENAME - name of the input file
		.UNIT - unit number the file is opened to
		.NEXTEND - number of extensions in the file.
		.OPEN_FOR_WRITE - flag (1=open for write, 2=open for update)


*EXAMPLES:
	Open a FITS file for reading:
		FITS_OPEN,'myfile.fits',fcb

	Open a new FITS file for output:
		FITS_OPEN,'newfile.fits',fcb,/write
*HISTORY:
	Written by:	D. Lindler	August, 1995
	July, 1996      NICMOS	Modified to allow open for overwrite
				to allow primary header to be modified
	DJL Oct. 15, 1996   corrected to properly extend AXIS when more
			than 100 extensions present
;-
;+

*NAME:
	FITS_READ
*PURPOSE:
	To read a FITS file.

*CATEGORY:
	INPUT/OUTPUT

*CALLING SEQUENCE:
	FITS_READ, filename_or_fcb, data [,header, group_par]

*INPUTS:
	FILENAME_OR_FCB - this parameter can be the FITS Control Block (FCB)
		returned by FITS_OPEN or the file name of the FITS file.  If
		a file name is supplied, FITS_READ will open the file with
		FITS_OPEN and close the file with FITS_CLOSE before exiting.
		When multiple extensions are to be read from the file, it is
		more efficient for the user to call FITS_OPEN and leave the
		file open until all extensions are read.

*OUTPUTS:
	DATA - data array.  If /NOSCALE is specified, BSCALE and BZERO
		(if present in the header) will not be used to scale the data.
		If Keywords FIRST and LAST are used to read a portion of the
		data or the heap portion of an extension, no scaling is done
		and data is returned as a 1-D vector. The user can use the IDL
		function REFORM to convert the data to the correct dimensions
		if desired.  If /DATA_ONLY is specified, no scaling is done.
	HEADER - FITS Header.  If an extension is read, and the /NO_PDU keyword
		parameter is not supplied, the primary data unit header
		and the extension header will be combined.  The header will have
		the form:

			<required keywords for the extension: XTENSION, BITPIX,
				NAXIS, ...>
			BEGIN MAIN HEADER --------------------------------
			<PDU header keyword and history less required keywords:
				SIMPLE, BITPIX, NAXIS, ...>
			BEGIN EXTENSION HEADER ---------------------------
			<extension header less required keywords that were
				placed at the beginning of the header.
			END
		
		The structure of the header is such that if a keyword is
		duplicated in both the PDU and extension headers, routine
		SXPAR will print a warning and return the extension value of
		the keyword. SXADDPAR and SXADDHIST will add new keywords and
		history to the extension portion of the header unless the
		parameter /PDU is supplied in the calling sequence.

	GROUP_PAR - Group parameter block for FITS random groups format files
		Any scale factors in the header (PSCALn and PZEROn) are not
		applied to the group parameters.

*KEYWORD PARAMETERS:

	/NOSCALE: Set to return the FITS data without applying the scale
		factors BZERO and BSCALE.
	/HEADER_ONLY: set to read the header only.
	/DATA_ONLY: set to read the data only.  If set, if any scale factors
		are present (BSCALE or BZERO), they will not be applied.
	/NO_PDU: Set to not add the primary data unit header keywords to the
		output header.
       /NO_ABORT: Set to return to calling program instead of a RETALL
               when an I/O error is encountered.  If set, the routine will
               return with !err=-1 and a message in the keyword MESSAGE.
               If not set, FITS_READ will print the message and issue a RETALL
       MESSAGE = value: Output error message
	EXTEN_NO - extension number to read.  If not set, the next extension
		in the file is read.  Set to 0 to read the primary data unit.
	XTENSION - string name of the xtension to read
	EXTNAME - string name of the extname to read
	EXTVER - integer version number to read
	EXTLEVEL - integer extension level to read
	FIRST - set this keyword to only read a portion of the data.  It gives
		the first word of the data to read
	LAST - set this keyword to only read a portion of the data.  It gives
               the last word number of the data to read
	GROUP - group number to read for GCOUNT>1.  (Default=0, the first group)
	NaNvalue - On non-IEEE floating point machines, it gives the value
		to place into words with IEEE NaN.
	ENUM - Output extensiont number that was read.  
	
*NOTES:
	Determination or which extension to read.
		case 1: EXTEN_NO specified. EXTEN_NO will give the number of the
			extension to read.  The primary data unit is refered
			to as extension 0. If EXTEN_NO is specified, XTENSION,
			EXTNAME, EXTVER, and EXTLEVEL parameters are ignored.
		case 2: if EXTEN_NO is not specified, the first extension
			with the specified XTENSION, EXTNAME, EXTVER, and
			EXTLEVEL will be read.  If any of the 4 parameters
			are not specified, they will not be used in the search.
			Setting EXTLEVEL=0, EXTVER=0, EXTNAME='', or
			XTENSION='' is the same as not supplying them.
		case 3: if none of the keyword parameters, EXTEN_NO, XTENSION,
			EXTNAME, EXTVER, or EXTLEVEL are supplied.  FITS_READ
			will read the next extension in the file.  If the
			primary data unit (PDU), extension 0, is null, the
			first call to FITS_READ will read the first extension
			of the file.

		The only way to read a null PDU is to use EXTEN_NO = 0.

	If FIRST and LAST are specified, the data is returned without applying
	any scale factors (BSCALE and BZERO) and the data is returned in a
	1-D vector.  This will allow you to read any portion of a multiple
	dimension data set.  Once returned, the IDL function REFORM can be
	used to place the correct dimensions on the data.

	IMPLICIT IMAGES: FITS_READ will construct an implicit image
		for cases where NAXIS=0 and the NPIX1, NPIX2, and PIXVALUE
		keywords are present.  The output image will be:
			image = replicate(PIXVALUE,NPIX1,NPIX2)

*EXAMPLES:
	Read the primary data unit of a FITS file, if it is null read the
	first extension:
		FITS_READ, 'myfile.fits', data, header

	Read the first two extensions of a FITS file and the extension with
	EXTNAME = 'FLUX' and EXTVER = 4
		FITS_OPEN, 'myfile.fits', fcb
		FITS_READ, fcb,data1, header2, exten_no = 1
		FITS_READ, fcb,data1, header2, exten_no = 2
		FITS_READ, fcb,data3, header3, extname='flux', extver=4
		FITS_CLOSE, fcb
	
	Read the sixth image in a data cube for the fourth extension.

		FITS_OPEN, 'myfile.fits', fcb
		image_number = 6
		ns = fcb.axis(0,4)
		nl = fcb.axis(1,4)
		i1 = (ns*nl)*(image_number-1)
		i2 = i2 + ns*nl-1
		FITS_READ,fcb,image,header,first=i1,last=i2
		image = reform(image,ns,nl,/overwrite)
		FITS_CLOSE

*HISTORY:
	Written by:	D. Lindler, August 1995
;-
;+
 Project     : SOHO - CDS

 Name        : 
	FXPAR()
 Purpose     : 
	Obtain the value of a parameter in a FITS header.
 Explanation : 
	The first 8 chacters of each element of HDR are searched for a match to
	NAME.  If the keyword is one of those allowed to take multiple values
	("HISTORY", "COMMENT", or "        " (blank)), then the value is taken
	as the next 72 characters.  Otherwise, it is assumed that the next
	character is "=", and the value (and optional comment) is then parsed
	from the last 71 characters.  An error occurs if there is no parameter
	with the given name.

	Complex numbers are recognized as two numbers separated by one or more
	space characters.

	If a numeric value has no decimal point (or E or D) it is returned as
	type LONG.  If it contains more than 8 numerals, or contains the
	character 'D', then it is returned as type DOUBLE.  Otherwise it is
	returned as type FLOAT
 Use         : 
	Result = FXPAR( HDR, NAME  [, ABORT ] )

	Result = FXPAR(HEADER,'DATE')		;Finds the value of DATE
	Result = FXPAR(HEADER,'NAXIS*')		;Returns array dimensions as
						;vector
 Inputs      : 
	HDR	= FITS header string array (e.g. as returned by FXREAD).  Each
		  element should have a length of 80 characters
	NAME	= String name of the parameter to return.  If NAME is of the
		  form 'keyword*' then an array is returned containing values
		  of keywordN where N is an integer.  The value of keywordN
		  will be placed in RESULT(N-1).  The data type of RESULT will
		  be the type of the first valid match of keywordN found.
 Opt. Inputs : 
	ABORT	= String specifying that FXPAR should do a RETALL if a
		  parameter is not found.  ABORT should contain a string to be
		  printed if the keyword parameter is not found.  If not
		  supplied, FXPAR will return with a negative !err if a keyword
		  is not found.
 Outputs     : 
	The returned value of the function is the value(s) associated with the
	requested keyword in the header array.

	If the parameter is complex, double precision, floating point, long or
	string, then the result is of that type.  Apostrophes are stripped from
	strings.  If the parameter is logical, 1 is returned for T, and 0 is
	returned for F.

	If NAME was of form 'keyword*' then a vector of values are returned.
 Opt. Outputs: 
	None.
 Keywords    : 
	COUNT	= Optional keyword to return a value equal to the number of
		  parameters found by FXPAR.
	COMMENTS= Array of comments associated with the returned values.
 Calls       : 
	GETTOK, VALID_NUM
 Common      : 
	None.
 Restrictions: 
	None.
 Side effects: 
	Keyword COUNT returns the number of parameters found.

	The system variable !err is set to -1 if parameter not found, 0 for a
	scalar value returned.  If a vector is returned it is set to the number
	of keyword matches found.

	If a keyword occurs more than once in a header, a warning is given,
	and the first occurence is used.  However, if the keyword is "HISTORY",
	"COMMENT", or "        " (blank), then multiple values are returned.
 Category    : 
	Data Handling, I/O, FITS, Generic.
 Prev. Hist. : 
	DMS, May, 1983, Written.
	D. Lindler Jan 90 added ABORT input parameter
	J. Isensee Jul,90 added COUNT keyword
	W. Thompson, Feb. 1992, added support for FITS complex values.
	W. Thompson, Oct. 1992, rewrote to change strategy for extracting
		values to allow for non-standard formats and renamed to FXPAR.
		Added COMMENT keyword.
 Written     : 
	David M. Stern, RSI, May 1983.
 Modified    : 
	Version 1, William Thompson, GSFC, 12 April 1993.
		Incorporated into CDS library.
	Version 2, William Thompson, GSFC, 14 October 1994
		Modified to use VALID_NUM instead of STRNUMBER.  Inserted
		additional call to VALID_NUM to trap cases where character
		strings did not contain quotation marks.
	Version 3, William Thompson, GSFC, 22 December 1994
		Fixed bug with blank keywords, following suggestion by Wayne
		Landsman.
 Version     : 
	Version 2, 14 October 1994
;-
;+
 NAME:
	GAUSSIAN

 PURPOSE:
	Compute the 1-D Gaussian function and optionally the derivative 
	at an array of points.

 CALLING:
	y = gaussian( xi, parms,[ pderiv ])

 INPUTS:
	xi = array, independent variable of Gaussian function.

	parms = parameters of Gaussian, 2 or 3 element array:
		parms(0) = maximum value (factor) of Gaussian,
		parms(1) = mean value (center) of Gaussian,
		parms(2) = standard deviation (sigma) of Gaussian.
		(if parms has only 2 elements then sigma taken from common).

 OPTIONAL OUTPUT:
	pderiv = optional output of partial derivatives,
		computed only if parameter is present in call.

		pderiv(*,i) = partial derivative at all xi absisca values
		with respect to parms(i), i=0,1,2.

	Function returns array of Gaussian evaluated at xi.

 EXAMPLE:
	Evaulate a Gaussian centered at x=0, with sigma=1, and a peak value
	of 10 at the points 0.5 and 1.5.   Also compute the derivative

	IDL> f = gaussian( [0.5,1.5], [10,0,1], DERIV )
	==> f= [8.825,3.25].   DERIV will be a 2 x 3 array containing the
	numerical derivative at the two points with respect to the 3 parameters.
 
 COMMON BLOCKS:
	common gaussian, sigma
 HISTORY:
	Written, Frank Varosi NASA/GSFC 1992.
;-
;+
 NAME:
	GETTOK                                    
 PURPOSE:
	Function to retrieve the first part of the string (GET TOKen)
	until the character char is encountered.

 CALLING SEQUENCE:
	token = gettok( st, char )

 INPUT:
	char - character separating tokens, scalar string

 INPUT-OUTPUT:
	st - (scalar) string to get token from (on output token is removed)

 OUTPUT:
	token - scalar string value is returned 

 EXAMPLE:
	If ST is 'abc=999' then gettok(ST,'=') would return
	'abc' and ST would be left as '999' 

 HISTORY
	version 1  by D. Lindler APR,86
	Remove leading blanks    W. Landsman (from JKF)    Aug. 1991
;-
;+
 NAME:
	IEEE_TO_HOST
 PURPOSE:
	To translate an IDL variable in IEEE-754 representation (as used, for
	example, in FITS data ), into the host machine architecture.

 CALLING SEQUENCE:
	IEEE_TO_HOST, data, [ IDLTYPE = , ]

 INPUT-OUTPUT PARAMETERS:
	data - any IDL variable, scalar or vector.   It will be modified by
		IEEE_TO_HOST to convert from IEEE to host representation.  Byte 
		and string variables are returned by IEEE_TO_HOST unchanged

 OPTIONAL KEYWORD INPUTS:
	IDLTYPE - scalar integer (1-7) specifying the IDL datatype according
		to the code given by the SIZE function.     This keyword
		is usually when DATA is a byte array to be interpreted as
		another datatype (e.g. FLOAT).

 EXAMPLE:
	A 2880 byte array (named FITARR) from a FITS record is to be 
	interpreted as floating and converted to the host representaton:

	IDL> IEEE_TO_HOST, fitarr, IDLTYPE = 4     

 METHOD:
	The BYTEORDER procedure is called with the appropriate keyword

 RESTRICTION:
	Assumes the IDL version is since 2.2.2 when the /XDRTOF keyword 
	became available to BYTEORDER.    There were two bad implementations
	in BYTEORDER for double precision: (1) in IDL V3.* for DecStations
	(!VERSION.ARCH = 'mipsel') and (2) on Dec Alpha OSF machines.
	IEEE_TO_HOST works around these cases by swapping bytes directly

 MODIFICATION HISTORY:
	Written, W. Landsman   Hughes/STX   May, 1992
	Fixed error Case statement for float and double   September 1992
	Workaround to /XDRTOD problem on DecStations January 1993 
	Assume since Version 2.2, correct double precision problems in 
	Alpha/OSF, implement Ultrix corrections from Tom McGlynn November 1994
	Added support for double precision complex   July 1995
	Workaround for BYTEORDER, /FTOXDR bug in VAX VMS V4.0  August 1995 
;-
;+
 NAME:
	MAN
 PURPOSE:
	Provides online documentation for IDL topics. If the current
	graphics device supports widgets, a graphical user interface
	is used. Otherwise, a more basic version which is a cross
	between Unix man pages and VMS online help is used. 
	This routine can emulate the V3.x online help system in V4.x and later.
 CATEGORY:
	Help, documentation .
 CALLING SEQUENCE:
	MAN [, REQUEST]
 INPUTS:
	REQUEST = A scalar string containing the procedure name or topic
		  for which help is desired.    MAN first tries to interpret
		  the string as a topic, and if not found then searches the
		  !PATH for the procedure.
 OUTPUTS:
	The widget version uses a text widget to display the help
	text. The basic version sends help text to the standard output.

 EXAMPLES:                                                             
                             
	IDL> man,'rebin'   ;Display help on intrinisic IDL REBIN function
	IDL> man,'hrebin'  ;Display help on Astronomy Library HREBIN procedure
	IDL> man,'astron'  ;Display all astronomy library procedures
 NOTES:
	To install the MAN procedure

	1.  Place the procedures in the /contrib/landsman directory in one's 
	!PATH.   

	2.  Define the !HELP_PATH sytem prior to entering IDL, to point to a 
	directoryto contain the help files.    This can be done either by 
	setting the environment variable IDL_HELP_PATH or by assigning 
	!HELP_PATH in a startup file,

	3.  Place any IDL help files (such ASTRON.HELP  from the Astronomy 
	Library) in the !HELP_PATH directory.    Also place the file 
	ROUTINES.HELP from IDL V3.6 into this directory.   This information 
	in the ROUTINES.HELP file will be somewhat obsolete, but it is the 
	only way to get online help for intrinsic procedures.

 RESTRICTIONS:
	The help text for intrinsic is derived from the LaTeX files used to 
	produce the V3.6 reference manual. However, it is not possible to 
	produce exactly the same output as found in the manual due to 
	limitations of text oriented terminals. The text used is therefore 
	considerably abbreviated. Always check the manual if the online help is
	insufficient. 

	MAN cannot locate procedures in a VMS text library
 MODIFICATION HISTORY:
	Adapted from MAN_PROC, W. Landsman             February, 1996
;-
;+
 NAME:
	NUMLINES() 
 PURPOSE:
	Return the number of lines in a file

 CALLING SEQUENCE:
	nl = NUMLINES( filename )
 INPUT:
	filename = name of file, scalar string
 OUTPUT:
	nl = number of lines in the file, scalar longword
		Set to -1 if the number of lines could not be determined
 METHOD:
	If Unix then spawn to wc; otherwise read 1 line at a time and count

 PROCEDURE CALLS:
	OS_FAMILY() - Determine if a unix system; Users with IDL V4.0 or later
		can replace this with !VERSION.OS_FAMILY
 MODIFICATION HISTORY:
	W. Landsman                              February 1996
;-
;+
 NAME:
	OS_FAMILY
 PURPOSE:
	Return the current operating system as in !VERSION.OS_FAMILY 

 CALLING SEQUENCE
	result = OS_FAMILY()
 INPUTS: 
	None
 OUTPUTS:
	result - scalar string containing one of the four values
		'Windows','MacOS','vms' or 'unix'
 NOTES:
	OS_FAMILY is assumed to be 'unix' if !VERSION.OS is not 'windows',
		'MacOS' or 'vms'

	To make procedures from IDL V4.0 and later compatibile with earlier
	versions of IDL, replace calls to !VERSION.OS_FAMILY with OS_FAMILY().	

 PROCEDURES CALLED
	function TAG_EXISTS()
 REVISION HISTORY:
	Written,  W. Landsman     
	12/9/96	JKF/ACC		- IDL Version 4.0 and higher(Win32)
;-
;+
 ----------------------------------------------------------------------
   PLOTORDERS --   
      
   *Program Description:
       This program will produce a postscript plot of the output
        from the STISEXTRACT procedures.   

   *Calling sequence:
      PLOTORDERS, rootname, /ascii

   *Inputs:
      rootname -- The STScI rootname of the observation 
                   (e.g., 'o4qx04040').
   
   *Optional Keywords:
       /ascii  -- write output to ascii files rather than IDL
                   save files.

   *HISTORY:
       8/99 -- Howk -- Created and documented.
      12/99 -- Howk -- Added \ascii keyword.
 ----------------------------------------------------------------------   
;-
;+
 NAME:
	poly_fit_weighted

 PURPOSE:
	Perform a least-square polynomial fit with optional error estimates.

 CATEGORY:
	Curve fitting.

 CALLING SEQUENCE:
	Result = POLYFITW(X, Y, W, NDegree [, Yfit, Yband, Sigma, A])

 INPUTS:
	    X:	The independent variable vector.

	    Y:	The dependent variable vector.  This vector should be the same 
		length as X.

	    W:	The vector of weights.  This vector should be same length as 
		X and Y.

     NDegree:	The degree of polynomial to fit.

 OUTPUTS:
	POLYFITW returns a vector of coefficients of length NDegree+1.

 OPTIONAL OUTPUT PARAMETERS:
	 Yfit:	The vector of calculated Y's.  Has an error of + or - Yband.

	Yband:	Error estimate for each point = 1 sigma.

	Sigma:	The standard deviation in Y units.

	    A:	Correlation matrix of the coefficients.

 COMMON BLOCKS:
	None.

 SIDE EFFECTS:
	None.

 MODIFICATION HISTORY:
	Written by: 	George Lawrence, LASP, University of Colorado,
			December, 1981.

	Adapted to VAX IDL by: David Stern, Jan, 1982.

	Weights added, April, 1987,  G. Lawrence

;-
;+
 NAME:
	psf_Gaussian

 PURPOSE:
	Return a point spread function having Gaussian profiles,
	as either a 1D vector, a 2D image, or 3D volumetric-data.

 CALLING:
	psf = psf_Gaussian( NPIXEL=, FWHM= , [/NORMALIZE, /ST_DEV,  )
 or:
	psf = psf_Gaussian( parameters, NPIXEL =  )

 REQUIRED KEYWORDS:
	NPIXEL = number pixels for each dimension, specify as an array,
		or just one number to make all sizes equal.

 OPTIONAL KEYWORDS:

	NDIMEN = dimension of result: 1 (vector), 2 (image), or 3 (volume),
		default = 2 (an image result).

	FWHM = the desired Full-Width Half-Max (pixels) in each dimension,
		specify as an array, or single number to make all the same.

	CENTROID = pixels numbers of PSF maximum ( 0.5 is center of a pixel ),
		default is exact center of requested vector/image/volume.

	STDEV = optional way to specify width by standard deviation param.

	XY_CORREL = scalar between 0 and 1 specifying correlation coefficient
		Use this keyword, for example, to specify an elliptical 
		gaussian oriented at an angle to the X,Y axis

	/NORMALIZE causes resulting PSF to be normalized so Total( psf ) = 1.

 INPUTS (optional):

	parameters = an NDIMEN by 3 array giving for each dimension:
			[ maxval, center, stdev ],  overrides other keywords.

 EXAMPLE:
	Create a 31 x 31 array containing a normalized centered gaussian 
	with an X FWHM = 4.3 and a Y FWHM = 3.6

	IDL> array = PSF_GAUSSIAN( Npixel=31, FWHM=[4.3,3.6], /NORMAL

 EXTERNAL CALLS:
	function Gaussian

 HISTORY:
	Written, Frank Varosi NASA/GSFC 1991.
;-
;+
 NAME:
       REPCHR
 PURPOSE:
       Replace all occurrences of one character with another in a text string.
 CATEGORY:
 CALLING SEQUENCE:
       new = repchr(old, c1, [c2])
 INPUTS:
       old = original text string.          in
       c1 = character to replace.           in
       c2 = character to replace it with.   in
            default is space.
 KEYWORD PARAMETERS:
 OUTPUTS:
       new = edited string.                 out
 COMMON BLOCKS:
 NOTES:
 MODIFICATION HISTORY:
       R. Sterner.  28 Oct, 1986.
       Johns Hopkins Applied Physics Lab.
       RES 1 Sep, 1989 --- converted to SUN.
       R. Sterner, 27 Jan, 1993 --- dropped reference to array.

 Copyright (C) 1986, Johns Hopkins University/Applied Physics Laboratory
 This software may be used, copied, or redistributed as long as it is not
 sold and this copyright notice is reproduced on each copy made.  This
 routine is provided as is without any express or implied warranties
 whatsoever.  Other limitations apply as described in the file disclaimer.txt.
;-
;+
 ----------------------------------------------------------------------
   STIS_ASCIICONVERT
      
   *Program Description: 
   
      This program will convert the IDL save files created by the
       STISEXTRACT procedures into ascii files containing columns of
       wavelength, gross and net fluxes, errors, and the derived
       background (in that order).  The output files have the naming
       convention rootname.###.dat, where rootname is the STScI
       archival rootname of the observation and ### is the order
       number.

   *Calling sequence:
      STIS_ASCIICONVERT
   
   *External Routines:
      WRITESTIS   

   *HISTORY:
      12/99 -- Howk -- Created and documented.
 ----------------------------------------------------------------------   
;-
;+
 ----------------------------------------------------------------------
  STIS_SETUP -- 

  *Program description:   
    This routine defines system variables used with the 
       FITS readers included as part of the STISEXTRACT
       support package.  This routine is based on the 
       start-up variables used with the GHRS IDT software.   
   
  *Calling sequence:
     STIS_SETUP

   *HISTORY:
        12/99 -- Howk -- Created and documented
                         
 ----------------------------------------------------------------------
;-
;+
 ----------------------------------------------------------------------
   STISDRIVER --   
      
   *Program Description:
       This program is designed to drive the spectral extraction of
       a STIS dataset including accurate background subtraction.
       The primary routine for doing the extraction is STISEXTRACT.
   
      The outputs of this routine are a set of IDL save files
       rootname.###.save, where ### is the spectral order in that
       save file.  By setting the keyword /ascii in the calling the
       procedure, ascii files named rootname.###.dat will be produced
       instead.  A postscript file containing plots of flux versus
       wavelength for every spectral order is also output in the file
       ROOTNAME.ps (where ROOTNAME is the rootname of the observation
       in all caps).

   *Calling sequence:
      STISDRIVER, rootname, /summed, /skip, /ascii, /nogauss

   *Inputs:
      rootname -- The STScI rootname of the observation 
                   (e.g., 'o4qx04040').
   
   *Optional Keywords:
       /summed -- extracts the data from an _sx2 file rather
                   than _x2d file.
       /ascii  -- write output to ascii files rather than IDL
                   save files.
       /skip   -- skips the first order in the file.  Useful
                   if order is corrupt (e.g., falls off the edge
                   of the detector).   However, the problem for
                   which this is designed should be taken care
                   of within STISEXTRACT.   
      /nogauss  -- Do not use Gaussian fit to derive center of
                   spectral trace and interloping orders in 2D
                   spectral images.  **This option is faster but
                   is less robust to problems in STIS reference 
                   files.**   
   
   *External Routines Called:
       FITS_OPEN,  WRITESTIS, STISEXTRACT, PLOTORDERS

   *HISTORY:
       7/99 -- Howk -- Created and added comments
       8/99 -- Howk -- Added ability to skip first order if corrupt.
      12/99 -- Howk -- Added \ascii keyword.
       1/00 -- Howk -- Modified FITS input.  Now uses FITS_OPEN to
                       access data and calls modified STISEXTRACT
                       with appropriate control block structure.
                         -- Modification adopted from suggestion by 
                              W. Landsman (GSFC)   
         3/01 -- Howk -- Added  BGFIT1D_GAUSS compliance.    
   
 ----------------------------------------------------------------------   
;-
;+
 ----------------------------------------------------------------------
 STISEXTRACT --
 
   *Program description:
      This routine will extract STIS spectra from the 2D rectified
      images provided by the STScI CALSTIS routine, fit and remove
      a background, extract and calibrate the flux and error vectors,
      and return wavelength, flux, background, and error vectors.
   
   *Calling sequence:
      STISEXTRACT, rootname, exnum, wave, flux, bg_out, err_out, sporder, 
                 \SMOOTHBG

   *Input:
      fcb      -- File control block for FITS access.
      exnum    -- Extension number of the SCI array.
   
   *Output:
      wave     -- Wavelength array
      flux     -- Flux array
      bg_out   -- Background array
      err_out  -- Error array
  
   *Keywords:
      /smoothbg -- Smooth the derived background using bg_smooth.pro
      /nogauss  -- Do not use Gaussian fit to derive center of
                   spectral trace and interloping orders in 2D
                   spectral images.  **This option is faster but
                   is less robust to problems in STIS reference 
                   files.**   
   
   *External Routines called:
      BGFIT1D, BGFIT1D_GAUSS, EXTRACT_TRACE, FXPAR, FITS_READ, BG_SMOOTH

   *HISTORY:
         7/99 -- Howk -- Created and added comments.
         8/99 -- Howk -- Added Lee filter smoothing option.   
        12/99 -- Howk -- Added HIRES compatability
        12/99 -- Howk -- Added automatic trimming for orders
                           at the end of an image.   
         1/00 -- Howk -- Fixed the fits_read call to read the
                           observation level header in order to get
                           the correct grating name.
         1/00 -- Howk -- Adopted to use file control block to access
                           FITS files.  -- Adopted from suggestion by
                           W. Landsman (GSFC).   
         3/01 -- Howk -- Added  BGFIT1D_GAUSS compliance.    
   
 ----------------------------------------------------------------------
;-
;+
 ----------------------------------------------------------------------
 STISEXTRACT --
 
   *Program description:
      This routine will extract STIS spectra from the 2D rectified
      images provided by the STScI CALSTIS routine, fit and remove
      a background, extract and calibrate the flux and error vectors,
      and return wavelength, flux, background, and error vectors.
   
   *Calling sequence:
      STISEXTRACT, rootname, exnum, wave, flux, bg_out, err_out, sporder, 
                 SUMMED=summed_yes 

   *Input:
      rootname -- STIS _x2d or _sx2 rootname.
      exnum    -- Extension number of the SCI array.
   
   *Output:
      wave     -- Wavelength array
      flux     -- Flux array
      bg_out   -- Background array
      err_out  -- Error array
  
   *Keywords:
      /summed   -- Use _sx2 FITS file.
      /smoothbg -- Smooth the derived background using bg_smooth.pro
      /nogauss  -- Do not use Gaussian fit to derive center of
                   spectral trace and interloping orders in 2D
                   spectral images.  **This option is faster but
                   is less robust to problems in STIS reference 
                   files.**   
   
   
   *External Routines called:
      BGFIT1D, BGFIT1D_GAUSS, EXTRACT_TRACE, FXPAR, FITS_READ, BG_SMOOTH

   *HISTORY:
         7/99 -- Howk -- Created and added comments.
         8/99 -- Howk -- Added Lee filter smoothing option.   
        12/99 -- Howk -- Added HIRES compatability
        12/99 -- Howk -- Added automatic trimming for orders
                           at the end of an image.   
         1/00 -- Howk -- Fixed the fits_read call to read the
                           observation level header in order to get
                           the correct grating name.
         1/00 -- Howk -- Adopted to use file control block to access
                           FITS files.  -- Adopted from suggestion by
                           W. Landsman (GSFC).   
         3/01 -- Howk -- Added  BGFIT1D_GAUSS compliance.    
   
 ----------------------------------------------------------------------
;-
;+
 NAME:
	STRN
 PURPOSE:
	The main and original purpose of this procedure is to convert a number
	to an unpadded string (i.e. with no blanks around it.)  However, it 
	has been expanded to be a multi-purpose formatting tool.  You may 
	specify a length for the output string; the returned string is either 
	set to that length or padded to be that length.  You may specify 
	characters to be used in padding and which side to be padded.  Finally,
	you may also specify a format for the number.  NOTE that the input 
	"number" need not be a number; it may be a string, or anything.  It is
	converted to string.

 CALLING SEQEUNCE:
	tmp = STRN( number, [ LENGTH=, PADTYPE=, PADCHAR=, FORMAT = ] )

 INPUT:
	NUMBER    This is the input variable to be operated on.  Traditionally,
		 it was a number, but it may be any scalar type.

 OPTIONAL INPUT:
	LENGTH    This KEYWORD specifies the length of the returned string.  
		If the output would have been longer, it is truncated.  If 
		the output would have been shorter, it is padded to the right 
		length.
	PADTYPE   This KEYWORD specifies the type of padding to be used, if any.
		0=Padded at End, 1=Padded at front, 2=Centered (pad front/end)
		IF not specified, PADTYPE=1
	PADCHAR   This KEYWORD specifies the character to be used when padding.
		The default is a space (' ').
	FORMAT    This keyword allows the FORTRAN type formatting of the input
		number (e.g. '(f6.2)')

 OUTPUT:
	tmp       The formatted string

 USEFUL EXAMPLES:
	print,'Used ',strn(stars),' stars.'  ==> 'Used 22 stars.'
	print,'Attempted ',strn(ret,leng=6,padt=1,padch='0'),' retries.'
		==> 'Attempted 000043 retries.'
	print,strn('M81 Star List',length=80,padtype=2)
		==> an 80 character line with 'M81 Star List' centered.
	print,'Error: ',strn(err,format='(f15.2)')
		==> 'Error: 3.24'     or ==> 'Error: 323535.22'

 HISTORY:
	03-JUL-90 Version 1 written by Eric W. Deutsch
	10-JUL-90 Trimming and padding options added         (E. Deutsch)
	29-JUL-91 Changed to keywords and header spiffed up     (E. Deutsch)
	Ma7 92 Work correctly for byte values (W. Landsman)
	19-NOV-92 Added Patch to work around IDL 2.4.0 bug which caused an
	error when STRN('(123)') was encountered.            (E. Deutsch)
;-
;+
 NAME:
	STRNUMBER
 PURPOSE:
	Function to determine if a string is a valid numeric value.

 CALLING SEQUENCE:
	result = strnumber( st, [val] )

 INPUTS:
	st - any IDL scalar string

 OUTPUTS:
	1 is returned as the function value if the string st has a
	valid numeric value, otherwise, 0 is returned.

 OPTIONAL OUTPUT:
	val - (optional) value of the string.  real*8

 WARNING:
	(1)   In V2.2.2 there was a bug in the IDL ON_IOERROR procedure that
	      will cause the following statement to hang up IDL

	      IDL> print,'' + string( strnumber('xxx') )
	      This bug was fixed in V2.3.0
	(2)   In V2.3.2, an IDL bug is seen in the following statements 
	      IDL> st = 'E'
	      IDL> q = strnumber(st)  & print,st
	      The variable 'st' gets modified to an empty string.   This problem
	      is related to the ambiguity of whether 'E' is a number or not 
	      (could be = 0.0E).    This bug was fixed in V3.0.0
	(3)   STRNUMBER was modified in February 1993 to include a special 
	      test for empty or null strings, which now returns a 0 (not a 
	      number).     Without this special test, it was found that a
	      empty string (' ') could corrupt the stack.
 HISTORY:
	version 1  By D. Lindler Aug. 1987
       test for empty string, W. Landsman          February, 1993
;-
;+
 NAME:
	SXADDPAR
 PURPOSE:
	Add or modify a parameter in a FITS or STSDAS header array.

 CALLING SEQUENCE:
	sxaddpar, Header, Name, Value, [ Comment,  Location,
				BEFORE =, AFTER = , FORMAT= , /PDU]

 INPUTS:
	Header = String array containing FITS or STSDAS header.    The
		length of each element must be 80 characters.    If not 
		defined, then SXADDPAR will create an empty FITS header array.

	Name = Name of parameter. If Name is already in the header the value 
		and possibly comment fields are modified.  Otherwise a new 
		record is added to the header.  If name = 'HISTORY' then the 
		value will be added to the record without replacement.  In 
		this case the comment parameter is ignored.

	Value = Value for parameter.  The value expression must be of the 
		correct type, e.g. integer, floating or string.  String values
		 of 'T' or 'F' are considered logical values.

 OPTIONAL INPUT PARAMETERS:
	Comment = String field.  The '/' is added by this routine.  Added 
		starting in position 31.    If not supplied, or set equal to 
		'', then the previous comment field is retained (when found) 

	Location = Keyword string name.  The parameter will be placed before the
		location of this keyword.    This parameter is identical to
		the BEFORE keyword and is kept only for consistency with
		earlier versions of SXADDPAR.

 OPTIONAL INPUT KEYWORD PARAMETERS:
	BEFORE	= Keyword string name.  The parameter will be placed before the
		location of this keyword.  For example, if BEFORE='HISTORY'
		then the parameter will be placed before the first history
		location.  This applies only when adding a new keyword;
		keywords already in the header are kept in the same position.

	AFTER	= Same as BEFORE, but the parameter will be placed after the
		location of this keyword.  This keyword takes precedence over
		BEFORE.

	FORMAT	= Specifies FORTRAN-like format for parameter, e.g. "F7.3".  A
		scalar string should be used.  For complex numbers the format
		should be defined so that it can be applied separately to the
		real and imaginary parts.
	/PDU    = specifies keyword is to be added to the primary data unit
		header. If it already exists, it's current value is updated in
		the current position and it is not moved.
 OUTPUTS:
	Header = updated FITS header array.

 RESTRICTIONS:
	Warning -- Parameters and names are not checked
		against valid FITS parameter names, values and types.

 MODIFICATION HISTORY:
	DMS, RSI, July, 1983.
	D. Lindler Oct. 86  Added longer string value capability
	Converted to NEWIDL  D. Lindler April 90
	Added Format keyword, J. Isensee, July, 1990
	Added keywords BEFORE and AFTER. K. Venkatakrishna, May '92
	Pad string values to at least 8 characters   W. Landsman  April 94
	Aug 95: added /PDU option and changed routine to update last occurence
		of an existing keyword (the one SXPAR reads) instead of the
		first occurence.
;-
;+
 NAME:
	SXDELPAR
 PURPOSE:
	Procedure to delete a keyword parameter(s) from a FITS or STSDAS header

 CALLING SEQUENCE:
	sxdelpar, h, parname

 INPUTS:
	h - FITS or STSDAS header, string array
	parname - string or string array of keyword name(s) to delete

 OUTPUTS:
	h - updated FITS or STSDAS header, If all lines are deleted from 
		the header, then h is returned with a value of 0

 EXAMPLE:
	Delete the astrometry keywords CDn_n from a FITS header, h

	IDL> sxdelpar, h, ['CD1_1','CD1_2','CD2_1','CD2_2']

 NOTES:
	(1)  No message is returned if the keyword to be deleted is not found
	(2)  All appearances of a keyword in the header will be deleted
 HISTORY:
	version 1  D. Lindler Feb. 1987
	Converted to new IDL  April 1990 by D. Lindler
	Test for case where all keywords are deleted    W. Landsman Aug 1995 
;-
;+
 NAME:
	SXPAR
 PURPOSE:
	Obtain the value of a parameter in a FITS or STSDAS header

 CALLING SEQUENCE:
	result = SXPAR( Hdr, Name, [ Abort, COUNT=, COMMENT =  ])   

 INPUTS:
	Hdr =  FITS or STSDAS header array, (e.g. as returned by READFITS or 
		SXOPEN) string array, each element should have a length of 80
		characters	

	Name = String name of the parameter to return.   If Name is of 
		the form 'keyword*' then an array is returned containing 
		values of keywordN where N is an integer.  The value
		of keywordN will be placed in RESULT(N-1).  The data type 
		of RESULT will be the type of the first valid match of keywordN 
		found.

 OPTIONAL INPUTS:
	ABORT - string specifying that SXPAR should do a RETALL
		if a parameter is not found.  ABORT should contain
		a string to be printed if the keyword parameter is not found.
		If not supplied SXPAR will return with a negative
		!err if a keyword is not found.

 OPTIONAL OUTPUT KEYWORDS:
	COUNT - Optional keyword to return a value equal to the number of 
		parameters found by sxpar, integer scalar

	COMMENT - Array of comments associated with the returned values

 OUTPUTS:
	Function value = value of parameter in header.
		If parameter is double precision, floating, long or string,
		the result is of that type.  Apostrophes are stripped
		from strings.  If the parameter is logical, byte(1) is
		returned for T, and a  byte(0) is returned for F.
		If Name was of form 'keyword*' then a vector of values
		are returned.

 SIDE EFFECTS:
	!ERR is set to -1 if parameter not found, 0 for a scalar
	value returned.  If a vector is returned it is set to the
	number of keyword matches found.

	If a keyword occurs more than once in a header, a warning is given,
	and the first occurence is used.

 EXAMPLES:
	Given a FITS header, h, return the values of all the NAXISi values
	into a vector.    Then place the history records into a string vector.

	IDL> naxisi = sxpar( h ,'NAXIS*')         ; Extract NAXISi value
	IDL> history = sxpar( h, 'HISTORY' )      ; Extract HISTORY records

 PROCEDURE:
	The first 8 chacters of each element of Hdr are searched for a 
	match to Name.  The value from the last 20 characters is returned.  
	An error occurs if there is no parameter with the given name.
       
	If a numeric value has no decimal point it is returned as type
	LONG.   If it contains more than 8 numerals, or contains the 
	character 'D', then it is returned as type DOUBLE.  Otherwise
	it is returned as type FLOAT

 MODIFICATION HISTORY:
	DMS, May, 1983, STPAR Written.
	D. Lindler Jan 90 added ABORT input parameter
	J. Isensee Jul,90 added COUNT keyword
	W. Thompson, Feb. 1992, added support for FITS complex values.
	W. Thompson, May 1992, corrected problem with HISTORY/COMMENT/blank
		keywords, and complex value error correction.
	W. Landsman, November 1994, fix case where NAME is an empty string 
	W. Landsman, March 1995,  Added COMMENT keyword, ability to read
		values longer than 20 character
	T. Beck, Dec, 1995, Logical parameters are now returned as byte
		variables, to distinguish them from parameters with
		integer 0 or 1.
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : TAG_EXIST()
               
 Purpose     : To test whether a tag name exists in a structure.
               
 Explanation : Routine obtains a list of tagnames and tests whether the
               requested one exists or not. The search is recursive so 
               if any tag names in the structure are themselves structures
               the search drops down to that level.
               
 Use         : IDL>  status = tag_exist(str, tag)
    
 Inputs      : str  -  structure variable to search
               tag  -  tag name to search for
               
 Opt. Inputs : None
               
 Outputs     : Function returns 1 if tag name exists or 0 if it does not.
               
 Opt. Outputs: None
               
 Keywords    : INDEX = index of matching tag

 Calls       : None

 Common      : None
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Util, structure
               
 Prev. Hist. : None

 Written     : C D Pike, RAL, 18-May-94
               
 Modified    : Version 1.1, D Zarro, ARC/GSFC, 27-Jan-95
               Passed out index of matching tag

 Version     : Version 1.1, 27-Jan-95
;-
;+
 NAME:
	TEXTCLOSE                   

 PURPOSE:
	procedure to close file for text output as specifed
	by the (non-standard) system variable !TEXTOUT. 

 CALLING SEQUENCE:
	textclose, [ TEXTOUT = ]

 KEYWORDS:
	textout - Indicates output device that was used by
		TEXTOPEN

 SIDE EFFECTS:
	if !textout is not equal to 5 and the textunit is
	opened.   Then unit !textunit is closed and released

 HISTORY:
	D. Lindler  Dec. 1986  (Replaces PRTOPEN)
	Test if TEXTOUT is a scalar string   W. Landsman   August 1993
 Can't close unit -1 (Standard Output) I. Freedman  April  1994
;-
;+
 NAME:
	TEXTOPEN
 PURPOSE
	Procedure to open file for text output.   The type of output 
	device (disk file or terminal screen) is specified by the 
	TEXTOUT keyword or the (nonstandard) system variable !TEXTOUT.

 CALLING SEQUENCE:
	textopen, program, [ TEXTOUT = ]

 INPUTS:
	program - scalar string giving name of program calling textopen

 OPTIONAL INPUT KEYWORDS:
	TEXTOUT - Integer scalar (0-7) specifying output file/device to be 
		opened (see below) or scalar string giving name of output file.
		If TEXTOUT is not supplied, then the (non-standard) system 
		variable !TEXTOUT is used.

	STDOUT - if this keyword is set and non-zero, then the standard output
		(unit = -1) is used for TEXTOUT=1 or TEXTOUT=2.   The use
		of STDOUT has  2 possible advantages:
		(1) the output will appear in a journal file
		(2) Many Unix machines print spurious control characters when
		printing to /dev/tty.   These characters are eliminated by 
		setting /STDOUT

		The disavdantage of /STDOUT is that the /MORE option is not
		available.

 SIDE EFFECTS:
	The following dev/file is opened for output.    Different effects
	occur depending whether the standard output is a GUI (Macintosh,
	Windows, Unix/IDLTool) or a TTY

		textout=0 	Nowhere
		textout=1	if a TTY then TERMINAL using /more option
                                   otherwise standard (Unit=-1) output
		textout=2	if a TTY then TERMINAL without /more option
                                   otherwise standard (Unit=-1) output
		textout=3	<program>.prt
		textout=4	laser.tmp
		textout=5      user must open file
		textout=7      same as 3 but text is appended to <program>.prt
				file if it already exists.
		textout = filename (default extension of .prt)

	The unit to be opened is obtained with the procedure GET_LUN
	unless !TEXTOUT=5.  The unit number is placed in system variable 
	!TEXTUNIT.  For !TEXTOUT=5 the user must set !TEXTUNIT to the 
	appropriate unit number.

 NOTES:
	When printing to a TTY terminal, the output will *not* appear in an 
	IDL JOURNAL session, unlike text printed with the PRINT command.

 NON-STANDARD SYSTEM VARIABLES:
	DEFSYSV,'!TEXTOUT',1
	DEFSYSV,'!TEXTUNIT',0

	One way to add these variables is to use the procedure ASTROLIB
 HISTORY:
	D. Lindler  Dec. 1986  
	Keyword textout added, J. Isensee, July, 1990
	Made transportable, D. Neill, April, 1991
	Trim input PROGRAM string W. Landsman  Feb 1993
	Don't modify TEXTOUT value   W. Landsman   Aug 1993
	Modified for MacOS  I. Freedman April 1994
	Modified for output terminals without a TTY  W. Landsman  August 1995
	Added /STDOUT keyword   W. Landsman    April 1996
	added textout=7 option, D. Lindler, July, 1996
;-
;+
 Project     : SOHO - CDS     
                   
 Name        : VALID_NUM()
               
 Purpose     : Check if a string is a valid number representation.
               
 Explanation : The input string is parsed for characters that may possibly
               form a valid number.  It is more robust than simply checking
               for an IDL conversion error because that allows strings such
               as '22.3qwert' to be returned as the valid number 22.3
               See also the original NUM_CHK which returns the status in 
               the opposite sense.

 Use         : IDL> status = valid_num(string  [,value]  [,/integer])
    
 Inputs      : string  -  the string to be tested
               
 Opt. Inputs : None
               
 Outputs     : The function returns 1 for valid, 0 for invalid number
               
 Opt. Outputs: value	- The value the string decodes to.  This will be
			  returned as a double precision number unless /INTEGER
			  is present, in which case a long integer is returned.
               
 Keywords    : Integer   -  if present code checks specfically for an integer.

 Calls       : None
               
 Restrictions: None
               
 Side effects: None
               
 Category    : Utilities, Numerical
               
 Prev. Hist. : Small changes from NUM_CHK by Andrew Bowen, 
                                             Tessella Support Services, 8/3/93

 Written     : CDS version by C D Pike, RAL, 24-May-93
               
 Modified    : Version 1, C D Pike, RAL, 24-May-93
		Version 2, William Thompson, GSFC, 14 October 1994
			Added optional output parameter VALUE to allow
			VALID_NUM to replace STRNUMBER in FITS routines.

 Version     : Version 1  24-May-93
;-
;+
 ----------------------------------------------------------------------
  WRITESTIS --

    *Program description:
       This procedure writes output files to store extracted STIS
       data.  The outputs can be in IDL save files or ASCII files
       (defaults to ASCII).  In an ASCII file five columns are output   
       storing the input variables: wave, gross, flux, err, bg.
       
   
   *Calling sequence:   
       WRITESTIS, rootname, order, wave, gross, flux, err, bg, /savefile
							
   *Input:
       rootname   -- Rootname for output.  The spectral order will
                    be attached, as well as '.save' for save files
                    or '.dat' for ASCII files (e.g., o4qx04040.454.save).
       order      -- The spectral order of the observation.
       wave       -- Wavelength vector.
       gross,flux -- Gross and net flux vectors.
       err        -- Error vector.
       bg         -- Background vector.   

   *Optional Keywords:
       /savefile  -- Store output in an IDL save file rather than 
                      an ASCII file.  The names of the variables
                      saved are: wave,gross,flux,err,bg.
								
     7/99 -- Howk -- Created from writespecnorm.pro
     4/00 -- Howk -- Changed file unit allocation to be more flexible.
   
 ----------------------------------------------------------------------
;-
